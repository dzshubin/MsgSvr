// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operate_channel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "operate_channel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace IM {

namespace {

const ::google::protobuf::Descriptor* OperateChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateChannel_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_operate_5fchannel_2eproto() {
  protobuf_AddDesc_operate_5fchannel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "operate_channel.proto");
  GOOGLE_CHECK(file != NULL);
  OperateChannel_descriptor_ = file->message_type(0);
  static const int OperateChannel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateChannel, req_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateChannel, result_),
  };
  OperateChannel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OperateChannel_descriptor_,
      OperateChannel::default_instance_,
      OperateChannel_offsets_,
      -1,
      -1,
      -1,
      sizeof(OperateChannel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateChannel, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateChannel, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_operate_5fchannel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OperateChannel_descriptor_, &OperateChannel::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_operate_5fchannel_2eproto() {
  delete OperateChannel::default_instance_;
  delete OperateChannel_reflection_;
}

void protobuf_AddDesc_operate_5fchannel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::IM::protobuf_AddDesc_operate_5freq_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025operate_channel.proto\022\002IM\032\026operate_req"
    "_base.proto\"F\n\016OperateChannel\022$\n\010req_bas"
    "e\030\001 \001(\0132\022.IM.OperateReqBase\022\016\n\006result\030\002 "
    "\001(\005b\006proto3", 131);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "operate_channel.proto", &protobuf_RegisterTypes);
  OperateChannel::default_instance_ = new OperateChannel();
  OperateChannel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_operate_5fchannel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_operate_5fchannel_2eproto {
  StaticDescriptorInitializer_operate_5fchannel_2eproto() {
    protobuf_AddDesc_operate_5fchannel_2eproto();
  }
} static_descriptor_initializer_operate_5fchannel_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperateChannel::kReqBaseFieldNumber;
const int OperateChannel::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperateChannel::OperateChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.OperateChannel)
}

void OperateChannel::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  req_base_ = const_cast< ::IM::OperateReqBase*>(&::IM::OperateReqBase::default_instance());
}

OperateChannel::OperateChannel(const OperateChannel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.OperateChannel)
}

void OperateChannel::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  req_base_ = NULL;
  result_ = 0;
}

OperateChannel::~OperateChannel() {
  // @@protoc_insertion_point(destructor:IM.OperateChannel)
  SharedDtor();
}

void OperateChannel::SharedDtor() {
  if (this != default_instance_) {
    delete req_base_;
  }
}

void OperateChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateChannel_descriptor_;
}

const OperateChannel& OperateChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_5fchannel_2eproto();
  return *default_instance_;
}

OperateChannel* OperateChannel::default_instance_ = NULL;

OperateChannel* OperateChannel::New(::google::protobuf::Arena* arena) const {
  OperateChannel* n = new OperateChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperateChannel::Clear() {
  if (GetArenaNoVirtual() == NULL && req_base_ != NULL) delete req_base_;
  req_base_ = NULL;
  result_ = 0;
}

bool OperateChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.OperateChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .IM.OperateReqBase req_base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.OperateChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.OperateChannel)
  return false;
#undef DO_
}

void OperateChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.OperateChannel)
  // optional .IM.OperateReqBase req_base = 1;
  if (this->has_req_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->req_base_, output);
  }

  // optional int32 result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.OperateChannel)
}

::google::protobuf::uint8* OperateChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.OperateChannel)
  // optional .IM.OperateReqBase req_base = 1;
  if (this->has_req_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->req_base_, target);
  }

  // optional int32 result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IM.OperateChannel)
  return target;
}

int OperateChannel::ByteSize() const {
  int total_size = 0;

  // optional .IM.OperateReqBase req_base = 1;
  if (this->has_req_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->req_base_);
  }

  // optional int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateChannel::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OperateChannel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OperateChannel>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateChannel::MergeFrom(const OperateChannel& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_req_base()) {
    mutable_req_base()->::IM::OperateReqBase::MergeFrom(from.req_base());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void OperateChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateChannel::CopyFrom(const OperateChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateChannel::IsInitialized() const {

  return true;
}

void OperateChannel::Swap(OperateChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperateChannel::InternalSwap(OperateChannel* other) {
  std::swap(req_base_, other->req_base_);
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OperateChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateChannel_descriptor_;
  metadata.reflection = OperateChannel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperateChannel

// optional .IM.OperateReqBase req_base = 1;
bool OperateChannel::has_req_base() const {
  return !_is_default_instance_ && req_base_ != NULL;
}
void OperateChannel::clear_req_base() {
  if (GetArenaNoVirtual() == NULL && req_base_ != NULL) delete req_base_;
  req_base_ = NULL;
}
const ::IM::OperateReqBase& OperateChannel::req_base() const {
  // @@protoc_insertion_point(field_get:IM.OperateChannel.req_base)
  return req_base_ != NULL ? *req_base_ : *default_instance_->req_base_;
}
::IM::OperateReqBase* OperateChannel::mutable_req_base() {
  
  if (req_base_ == NULL) {
    req_base_ = new ::IM::OperateReqBase;
  }
  // @@protoc_insertion_point(field_mutable:IM.OperateChannel.req_base)
  return req_base_;
}
::IM::OperateReqBase* OperateChannel::release_req_base() {
  
  ::IM::OperateReqBase* temp = req_base_;
  req_base_ = NULL;
  return temp;
}
void OperateChannel::set_allocated_req_base(::IM::OperateReqBase* req_base) {
  delete req_base_;
  req_base_ = req_base;
  if (req_base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:IM.OperateChannel.req_base)
}

// optional int32 result = 2;
void OperateChannel::clear_result() {
  result_ = 0;
}
 ::google::protobuf::int32 OperateChannel::result() const {
  // @@protoc_insertion_point(field_get:IM.OperateChannel.result)
  return result_;
}
 void OperateChannel::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.OperateChannel.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace IM

// @@protoc_insertion_point(global_scope)
