// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel_members.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "channel_members.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace IM {

namespace {

const ::google::protobuf::Descriptor* ChannelMembersInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelMembersInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelMember_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_channel_5fmembers_2eproto() {
  protobuf_AddDesc_channel_5fmembers_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "channel_members.proto");
  GOOGLE_CHECK(file != NULL);
  ChannelMembersInfo_descriptor_ = file->message_type(0);
  static const int ChannelMembersInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMembersInfo, channel_member_),
  };
  ChannelMembersInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChannelMembersInfo_descriptor_,
      ChannelMembersInfo::default_instance_,
      ChannelMembersInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChannelMembersInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMembersInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMembersInfo, _is_default_instance_));
  ChannelMember_descriptor_ = file->message_type(1);
  static const int ChannelMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMember, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMember, users_),
  };
  ChannelMember_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChannelMember_descriptor_,
      ChannelMember::default_instance_,
      ChannelMember_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChannelMember),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMember, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMember, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_channel_5fmembers_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChannelMembersInfo_descriptor_, &ChannelMembersInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChannelMember_descriptor_, &ChannelMember::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_channel_5fmembers_2eproto() {
  delete ChannelMembersInfo::default_instance_;
  delete ChannelMembersInfo_reflection_;
  delete ChannelMember::default_instance_;
  delete ChannelMember_reflection_;
}

void protobuf_AddDesc_channel_5fmembers_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::IM::protobuf_AddDesc_contacts_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025channel_members.proto\022\002IM\032\016contacts.pr"
    "oto\"\?\n\022ChannelMembersInfo\022)\n\016channel_mem"
    "ber\030\001 \003(\0132\021.IM.ChannelMember\"<\n\rChannelM"
    "ember\022\022\n\nchannel_id\030\001 \001(\005\022\027\n\005users\030\002 \003(\013"
    "2\010.IM.Userb\006proto3", 178);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "channel_members.proto", &protobuf_RegisterTypes);
  ChannelMembersInfo::default_instance_ = new ChannelMembersInfo();
  ChannelMember::default_instance_ = new ChannelMember();
  ChannelMembersInfo::default_instance_->InitAsDefaultInstance();
  ChannelMember::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_channel_5fmembers_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_channel_5fmembers_2eproto {
  StaticDescriptorInitializer_channel_5fmembers_2eproto() {
    protobuf_AddDesc_channel_5fmembers_2eproto();
  }
} static_descriptor_initializer_channel_5fmembers_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelMembersInfo::kChannelMemberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelMembersInfo::ChannelMembersInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.ChannelMembersInfo)
}

void ChannelMembersInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChannelMembersInfo::ChannelMembersInfo(const ChannelMembersInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.ChannelMembersInfo)
}

void ChannelMembersInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ChannelMembersInfo::~ChannelMembersInfo() {
  // @@protoc_insertion_point(destructor:IM.ChannelMembersInfo)
  SharedDtor();
}

void ChannelMembersInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChannelMembersInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelMembersInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelMembersInfo_descriptor_;
}

const ChannelMembersInfo& ChannelMembersInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fmembers_2eproto();
  return *default_instance_;
}

ChannelMembersInfo* ChannelMembersInfo::default_instance_ = NULL;

ChannelMembersInfo* ChannelMembersInfo::New(::google::protobuf::Arena* arena) const {
  ChannelMembersInfo* n = new ChannelMembersInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelMembersInfo::Clear() {
  channel_member_.Clear();
}

bool ChannelMembersInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.ChannelMembersInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IM.ChannelMember channel_member = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_channel_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_channel_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_channel_member;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.ChannelMembersInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.ChannelMembersInfo)
  return false;
#undef DO_
}

void ChannelMembersInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.ChannelMembersInfo)
  // repeated .IM.ChannelMember channel_member = 1;
  for (unsigned int i = 0, n = this->channel_member_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channel_member(i), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.ChannelMembersInfo)
}

::google::protobuf::uint8* ChannelMembersInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.ChannelMembersInfo)
  // repeated .IM.ChannelMember channel_member = 1;
  for (unsigned int i = 0, n = this->channel_member_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->channel_member(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IM.ChannelMembersInfo)
  return target;
}

int ChannelMembersInfo::ByteSize() const {
  int total_size = 0;

  // repeated .IM.ChannelMember channel_member = 1;
  total_size += 1 * this->channel_member_size();
  for (int i = 0; i < this->channel_member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channel_member(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelMembersInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChannelMembersInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelMembersInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChannelMembersInfo::MergeFrom(const ChannelMembersInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  channel_member_.MergeFrom(from.channel_member_);
}

void ChannelMembersInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMembersInfo::CopyFrom(const ChannelMembersInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMembersInfo::IsInitialized() const {

  return true;
}

void ChannelMembersInfo::Swap(ChannelMembersInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelMembersInfo::InternalSwap(ChannelMembersInfo* other) {
  channel_member_.UnsafeArenaSwap(&other->channel_member_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelMembersInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelMembersInfo_descriptor_;
  metadata.reflection = ChannelMembersInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelMembersInfo

// repeated .IM.ChannelMember channel_member = 1;
int ChannelMembersInfo::channel_member_size() const {
  return channel_member_.size();
}
void ChannelMembersInfo::clear_channel_member() {
  channel_member_.Clear();
}
const ::IM::ChannelMember& ChannelMembersInfo::channel_member(int index) const {
  // @@protoc_insertion_point(field_get:IM.ChannelMembersInfo.channel_member)
  return channel_member_.Get(index);
}
::IM::ChannelMember* ChannelMembersInfo::mutable_channel_member(int index) {
  // @@protoc_insertion_point(field_mutable:IM.ChannelMembersInfo.channel_member)
  return channel_member_.Mutable(index);
}
::IM::ChannelMember* ChannelMembersInfo::add_channel_member() {
  // @@protoc_insertion_point(field_add:IM.ChannelMembersInfo.channel_member)
  return channel_member_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::ChannelMember >*
ChannelMembersInfo::mutable_channel_member() {
  // @@protoc_insertion_point(field_mutable_list:IM.ChannelMembersInfo.channel_member)
  return &channel_member_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::ChannelMember >&
ChannelMembersInfo::channel_member() const {
  // @@protoc_insertion_point(field_list:IM.ChannelMembersInfo.channel_member)
  return channel_member_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelMember::kChannelIdFieldNumber;
const int ChannelMember::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelMember::ChannelMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.ChannelMember)
}

void ChannelMember::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChannelMember::ChannelMember(const ChannelMember& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.ChannelMember)
}

void ChannelMember::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  channel_id_ = 0;
}

ChannelMember::~ChannelMember() {
  // @@protoc_insertion_point(destructor:IM.ChannelMember)
  SharedDtor();
}

void ChannelMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChannelMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelMember_descriptor_;
}

const ChannelMember& ChannelMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fmembers_2eproto();
  return *default_instance_;
}

ChannelMember* ChannelMember::default_instance_ = NULL;

ChannelMember* ChannelMember::New(::google::protobuf::Arena* arena) const {
  ChannelMember* n = new ChannelMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelMember::Clear() {
  channel_id_ = 0;
  users_.Clear();
}

bool ChannelMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.ChannelMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channel_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_users;
        break;
      }

      // repeated .IM.User users = 2;
      case 2: {
        if (tag == 18) {
         parse_users:
          DO_(input->IncrementRecursionDepth());
         parse_loop_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_users;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.ChannelMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.ChannelMember)
  return false;
#undef DO_
}

void ChannelMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.ChannelMember)
  // optional int32 channel_id = 1;
  if (this->channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel_id(), output);
  }

  // repeated .IM.User users = 2;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->users(i), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.ChannelMember)
}

::google::protobuf::uint8* ChannelMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.ChannelMember)
  // optional int32 channel_id = 1;
  if (this->channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel_id(), target);
  }

  // repeated .IM.User users = 2;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->users(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IM.ChannelMember)
  return target;
}

int ChannelMember::ByteSize() const {
  int total_size = 0;

  // optional int32 channel_id = 1;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel_id());
  }

  // repeated .IM.User users = 2;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelMember::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChannelMember* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelMember>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChannelMember::MergeFrom(const ChannelMember& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  users_.MergeFrom(from.users_);
  if (from.channel_id() != 0) {
    set_channel_id(from.channel_id());
  }
}

void ChannelMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMember::CopyFrom(const ChannelMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMember::IsInitialized() const {

  return true;
}

void ChannelMember::Swap(ChannelMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelMember::InternalSwap(ChannelMember* other) {
  std::swap(channel_id_, other->channel_id_);
  users_.UnsafeArenaSwap(&other->users_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelMember_descriptor_;
  metadata.reflection = ChannelMember_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelMember

// optional int32 channel_id = 1;
void ChannelMember::clear_channel_id() {
  channel_id_ = 0;
}
 ::google::protobuf::int32 ChannelMember::channel_id() const {
  // @@protoc_insertion_point(field_get:IM.ChannelMember.channel_id)
  return channel_id_;
}
 void ChannelMember::set_channel_id(::google::protobuf::int32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:IM.ChannelMember.channel_id)
}

// repeated .IM.User users = 2;
int ChannelMember::users_size() const {
  return users_.size();
}
void ChannelMember::clear_users() {
  users_.Clear();
}
const ::IM::User& ChannelMember::users(int index) const {
  // @@protoc_insertion_point(field_get:IM.ChannelMember.users)
  return users_.Get(index);
}
::IM::User* ChannelMember::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:IM.ChannelMember.users)
  return users_.Mutable(index);
}
::IM::User* ChannelMember::add_users() {
  // @@protoc_insertion_point(field_add:IM.ChannelMember.users)
  return users_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::User >*
ChannelMember::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:IM.ChannelMember.users)
  return &users_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::User >&
ChannelMember::users() const {
  // @@protoc_insertion_point(field_list:IM.ChannelMember.users)
  return users_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace IM

// @@protoc_insertion_point(global_scope)
