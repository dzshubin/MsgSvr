// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "channel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace IM {

namespace {

const ::google::protobuf::Descriptor* ChannelVec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelVec_reflection_ = NULL;
const ::google::protobuf::Descriptor* Channel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Channel_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_channel_2eproto() {
  protobuf_AddDesc_channel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "channel.proto");
  GOOGLE_CHECK(file != NULL);
  ChannelVec_descriptor_ = file->message_type(0);
  static const int ChannelVec_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelVec, channels_),
  };
  ChannelVec_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChannelVec_descriptor_,
      ChannelVec::default_instance_,
      ChannelVec_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChannelVec),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelVec, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelVec, _is_default_instance_));
  Channel_descriptor_ = file->message_type(1);
  static const int Channel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, user_),
  };
  Channel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Channel_descriptor_,
      Channel::default_instance_,
      Channel_offsets_,
      -1,
      -1,
      -1,
      sizeof(Channel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Channel, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_channel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChannelVec_descriptor_, &ChannelVec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Channel_descriptor_, &Channel::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_channel_2eproto() {
  delete ChannelVec::default_instance_;
  delete ChannelVec_reflection_;
  delete Channel::default_instance_;
  delete Channel_reflection_;
}

void protobuf_AddDesc_channel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::IM::protobuf_AddDesc_contacts_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rchannel.proto\022\002IM\032\016contacts.proto\"+\n\nC"
    "hannelVec\022\035\n\010channels\030\001 \003(\0132\013.IM.Channel"
    "\";\n\007Channel\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\026\n"
    "\004user\030\003 \003(\0132\010.IM.Userb\006proto3", 149);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "channel.proto", &protobuf_RegisterTypes);
  ChannelVec::default_instance_ = new ChannelVec();
  Channel::default_instance_ = new Channel();
  ChannelVec::default_instance_->InitAsDefaultInstance();
  Channel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_channel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_channel_2eproto {
  StaticDescriptorInitializer_channel_2eproto() {
    protobuf_AddDesc_channel_2eproto();
  }
} static_descriptor_initializer_channel_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelVec::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelVec::ChannelVec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.ChannelVec)
}

void ChannelVec::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChannelVec::ChannelVec(const ChannelVec& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.ChannelVec)
}

void ChannelVec::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ChannelVec::~ChannelVec() {
  // @@protoc_insertion_point(destructor:IM.ChannelVec)
  SharedDtor();
}

void ChannelVec::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChannelVec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelVec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelVec_descriptor_;
}

const ChannelVec& ChannelVec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_2eproto();
  return *default_instance_;
}

ChannelVec* ChannelVec::default_instance_ = NULL;

ChannelVec* ChannelVec::New(::google::protobuf::Arena* arena) const {
  ChannelVec* n = new ChannelVec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelVec::Clear() {
  channels_.Clear();
}

bool ChannelVec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.ChannelVec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IM.Channel channels = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_channels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_channels;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.ChannelVec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.ChannelVec)
  return false;
#undef DO_
}

void ChannelVec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.ChannelVec)
  // repeated .IM.Channel channels = 1;
  for (unsigned int i = 0, n = this->channels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channels(i), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.ChannelVec)
}

::google::protobuf::uint8* ChannelVec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.ChannelVec)
  // repeated .IM.Channel channels = 1;
  for (unsigned int i = 0, n = this->channels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->channels(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IM.ChannelVec)
  return target;
}

int ChannelVec::ByteSize() const {
  int total_size = 0;

  // repeated .IM.Channel channels = 1;
  total_size += 1 * this->channels_size();
  for (int i = 0; i < this->channels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channels(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelVec::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChannelVec* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelVec>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChannelVec::MergeFrom(const ChannelVec& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  channels_.MergeFrom(from.channels_);
}

void ChannelVec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelVec::CopyFrom(const ChannelVec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelVec::IsInitialized() const {

  return true;
}

void ChannelVec::Swap(ChannelVec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelVec::InternalSwap(ChannelVec* other) {
  channels_.UnsafeArenaSwap(&other->channels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelVec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelVec_descriptor_;
  metadata.reflection = ChannelVec_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelVec

// repeated .IM.Channel channels = 1;
int ChannelVec::channels_size() const {
  return channels_.size();
}
void ChannelVec::clear_channels() {
  channels_.Clear();
}
const ::IM::Channel& ChannelVec::channels(int index) const {
  // @@protoc_insertion_point(field_get:IM.ChannelVec.channels)
  return channels_.Get(index);
}
::IM::Channel* ChannelVec::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:IM.ChannelVec.channels)
  return channels_.Mutable(index);
}
::IM::Channel* ChannelVec::add_channels() {
  // @@protoc_insertion_point(field_add:IM.ChannelVec.channels)
  return channels_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::Channel >*
ChannelVec::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:IM.ChannelVec.channels)
  return &channels_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::Channel >&
ChannelVec::channels() const {
  // @@protoc_insertion_point(field_list:IM.ChannelVec.channels)
  return channels_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Channel::kIdFieldNumber;
const int Channel::kNameFieldNumber;
const int Channel::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Channel::Channel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Channel)
}

void Channel::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Channel::Channel(const Channel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Channel)
}

void Channel::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Channel::~Channel() {
  // @@protoc_insertion_point(destructor:IM.Channel)
  SharedDtor();
}

void Channel::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Channel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Channel_descriptor_;
}

const Channel& Channel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_2eproto();
  return *default_instance_;
}

Channel* Channel::default_instance_ = NULL;

Channel* Channel::New(::google::protobuf::Arena* arena) const {
  Channel* n = new Channel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Channel::Clear() {
  id_ = 0;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.Clear();
}

bool Channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Channel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Channel.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // repeated .IM.User user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(input->IncrementRecursionDepth());
         parse_loop_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_user;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Channel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Channel)
  return false;
#undef DO_
}

void Channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Channel)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Channel.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .IM.User user = 3;
  for (unsigned int i = 0, n = this->user_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(i), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.Channel)
}

::google::protobuf::uint8* Channel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Channel)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Channel.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .IM.User user = 3;
  for (unsigned int i = 0, n = this->user_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IM.Channel)
  return target;
}

int Channel::ByteSize() const {
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated .IM.User user = 3;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Channel::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Channel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Channel>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Channel::MergeFrom(const Channel& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  user_.MergeFrom(from.user_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Channel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channel::CopyFrom(const Channel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {

  return true;
}

void Channel::Swap(Channel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Channel::InternalSwap(Channel* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  user_.UnsafeArenaSwap(&other->user_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Channel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Channel_descriptor_;
  metadata.reflection = Channel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Channel

// optional int32 id = 1;
void Channel::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Channel::id() const {
  // @@protoc_insertion_point(field_get:IM.Channel.id)
  return id_;
}
 void Channel::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:IM.Channel.id)
}

// optional string name = 2;
void Channel::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Channel::name() const {
  // @@protoc_insertion_point(field_get:IM.Channel.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Channel::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Channel.name)
}
 void Channel::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Channel.name)
}
 void Channel::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Channel.name)
}
 ::std::string* Channel::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.Channel.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Channel::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Channel::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:IM.Channel.name)
}

// repeated .IM.User user = 3;
int Channel::user_size() const {
  return user_.size();
}
void Channel::clear_user() {
  user_.Clear();
}
const ::IM::User& Channel::user(int index) const {
  // @@protoc_insertion_point(field_get:IM.Channel.user)
  return user_.Get(index);
}
::IM::User* Channel::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Channel.user)
  return user_.Mutable(index);
}
::IM::User* Channel::add_user() {
  // @@protoc_insertion_point(field_add:IM.Channel.user)
  return user_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::User >*
Channel::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:IM.Channel.user)
  return &user_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::User >&
Channel::user() const {
  // @@protoc_insertion_point(field_list:IM.Channel.user)
  return user_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace IM

// @@protoc_insertion_point(global_scope)
