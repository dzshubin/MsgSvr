// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fetch_history.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fetch_history.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace IM {

namespace {

const ::google::protobuf::Descriptor* FetchHistoryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetchHistoryReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fetch_5fhistory_2eproto() {
  protobuf_AddDesc_fetch_5fhistory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fetch_history.proto");
  GOOGLE_CHECK(file != NULL);
  FetchHistoryReq_descriptor_ = file->message_type(0);
  static const int FetchHistoryReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchHistoryReq, req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchHistoryReq, target_id_),
  };
  FetchHistoryReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FetchHistoryReq_descriptor_,
      FetchHistoryReq::default_instance_,
      FetchHistoryReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(FetchHistoryReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchHistoryReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchHistoryReq, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fetch_5fhistory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FetchHistoryReq_descriptor_, &FetchHistoryReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fetch_5fhistory_2eproto() {
  delete FetchHistoryReq::default_instance_;
  delete FetchHistoryReq_reflection_;
}

void protobuf_AddDesc_fetch_5fhistory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023fetch_history.proto\022\002IM\"4\n\017FetchHistor"
    "yReq\022\016\n\006req_id\030\001 \001(\003\022\021\n\ttarget_id\030\002 \001(\003b"
    "\006proto3", 87);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fetch_history.proto", &protobuf_RegisterTypes);
  FetchHistoryReq::default_instance_ = new FetchHistoryReq();
  FetchHistoryReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fetch_5fhistory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fetch_5fhistory_2eproto {
  StaticDescriptorInitializer_fetch_5fhistory_2eproto() {
    protobuf_AddDesc_fetch_5fhistory_2eproto();
  }
} static_descriptor_initializer_fetch_5fhistory_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FetchHistoryReq::kReqIdFieldNumber;
const int FetchHistoryReq::kTargetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FetchHistoryReq::FetchHistoryReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.FetchHistoryReq)
}

void FetchHistoryReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FetchHistoryReq::FetchHistoryReq(const FetchHistoryReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.FetchHistoryReq)
}

void FetchHistoryReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  req_id_ = GOOGLE_LONGLONG(0);
  target_id_ = GOOGLE_LONGLONG(0);
}

FetchHistoryReq::~FetchHistoryReq() {
  // @@protoc_insertion_point(destructor:IM.FetchHistoryReq)
  SharedDtor();
}

void FetchHistoryReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FetchHistoryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchHistoryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetchHistoryReq_descriptor_;
}

const FetchHistoryReq& FetchHistoryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fetch_5fhistory_2eproto();
  return *default_instance_;
}

FetchHistoryReq* FetchHistoryReq::default_instance_ = NULL;

FetchHistoryReq* FetchHistoryReq::New(::google::protobuf::Arena* arena) const {
  FetchHistoryReq* n = new FetchHistoryReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FetchHistoryReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FetchHistoryReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(req_id_, target_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool FetchHistoryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.FetchHistoryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 req_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &req_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // optional int64 target_id = 2;
      case 2: {
        if (tag == 16) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.FetchHistoryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.FetchHistoryReq)
  return false;
#undef DO_
}

void FetchHistoryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.FetchHistoryReq)
  // optional int64 req_id = 1;
  if (this->req_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->req_id(), output);
  }

  // optional int64 target_id = 2;
  if (this->target_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->target_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.FetchHistoryReq)
}

::google::protobuf::uint8* FetchHistoryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.FetchHistoryReq)
  // optional int64 req_id = 1;
  if (this->req_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->req_id(), target);
  }

  // optional int64 target_id = 2;
  if (this->target_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->target_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IM.FetchHistoryReq)
  return target;
}

int FetchHistoryReq::ByteSize() const {
  int total_size = 0;

  // optional int64 req_id = 1;
  if (this->req_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->req_id());
  }

  // optional int64 target_id = 2;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchHistoryReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FetchHistoryReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FetchHistoryReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetchHistoryReq::MergeFrom(const FetchHistoryReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.req_id() != 0) {
    set_req_id(from.req_id());
  }
  if (from.target_id() != 0) {
    set_target_id(from.target_id());
  }
}

void FetchHistoryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchHistoryReq::CopyFrom(const FetchHistoryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchHistoryReq::IsInitialized() const {

  return true;
}

void FetchHistoryReq::Swap(FetchHistoryReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FetchHistoryReq::InternalSwap(FetchHistoryReq* other) {
  std::swap(req_id_, other->req_id_);
  std::swap(target_id_, other->target_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FetchHistoryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetchHistoryReq_descriptor_;
  metadata.reflection = FetchHistoryReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FetchHistoryReq

// optional int64 req_id = 1;
void FetchHistoryReq::clear_req_id() {
  req_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FetchHistoryReq::req_id() const {
  // @@protoc_insertion_point(field_get:IM.FetchHistoryReq.req_id)
  return req_id_;
}
 void FetchHistoryReq::set_req_id(::google::protobuf::int64 value) {
  
  req_id_ = value;
  // @@protoc_insertion_point(field_set:IM.FetchHistoryReq.req_id)
}

// optional int64 target_id = 2;
void FetchHistoryReq::clear_target_id() {
  target_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 FetchHistoryReq::target_id() const {
  // @@protoc_insertion_point(field_get:IM.FetchHistoryReq.target_id)
  return target_id_;
}
 void FetchHistoryReq::set_target_id(::google::protobuf::int64 value) {
  
  target_id_ = value;
  // @@protoc_insertion_point(field_set:IM.FetchHistoryReq.target_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace IM

// @@protoc_insertion_point(global_scope)
