// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel.proto

#ifndef PROTOBUF_channel_2eproto__INCLUDED
#define PROTOBUF_channel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "contacts.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_channel_2eproto();
void protobuf_AssignDesc_channel_2eproto();
void protobuf_ShutdownFile_channel_2eproto();

class Channel;
class ChannelVec;

// ===================================================================

class ChannelVec : public ::google::protobuf::Message {
 public:
  ChannelVec();
  virtual ~ChannelVec();

  ChannelVec(const ChannelVec& from);

  inline ChannelVec& operator=(const ChannelVec& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelVec& default_instance();

  void Swap(ChannelVec* other);

  // implements Message ----------------------------------------------

  inline ChannelVec* New() const { return New(NULL); }

  ChannelVec* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelVec& from);
  void MergeFrom(const ChannelVec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChannelVec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.Channel channels = 1;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 1;
  const ::IM::Channel& channels(int index) const;
  ::IM::Channel* mutable_channels(int index);
  ::IM::Channel* add_channels();
  ::google::protobuf::RepeatedPtrField< ::IM::Channel >*
      mutable_channels();
  const ::google::protobuf::RepeatedPtrField< ::IM::Channel >&
      channels() const;

  // @@protoc_insertion_point(class_scope:IM.ChannelVec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::IM::Channel > channels_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_channel_2eproto();
  friend void protobuf_AssignDesc_channel_2eproto();
  friend void protobuf_ShutdownFile_channel_2eproto();

  void InitAsDefaultInstance();
  static ChannelVec* default_instance_;
};
// -------------------------------------------------------------------

class Channel : public ::google::protobuf::Message {
 public:
  Channel();
  virtual ~Channel();

  Channel(const Channel& from);

  inline Channel& operator=(const Channel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Channel& default_instance();

  void Swap(Channel* other);

  // implements Message ----------------------------------------------

  inline Channel* New() const { return New(NULL); }

  Channel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Channel& from);
  void MergeFrom(const Channel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Channel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .IM.User user = 3;
  int user_size() const;
  void clear_user();
  static const int kUserFieldNumber = 3;
  const ::IM::User& user(int index) const;
  ::IM::User* mutable_user(int index);
  ::IM::User* add_user();
  ::google::protobuf::RepeatedPtrField< ::IM::User >*
      mutable_user();
  const ::google::protobuf::RepeatedPtrField< ::IM::User >&
      user() const;

  // @@protoc_insertion_point(class_scope:IM.Channel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::IM::User > user_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_channel_2eproto();
  friend void protobuf_AssignDesc_channel_2eproto();
  friend void protobuf_ShutdownFile_channel_2eproto();

  void InitAsDefaultInstance();
  static Channel* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelVec

// repeated .IM.Channel channels = 1;
inline int ChannelVec::channels_size() const {
  return channels_.size();
}
inline void ChannelVec::clear_channels() {
  channels_.Clear();
}
inline const ::IM::Channel& ChannelVec::channels(int index) const {
  // @@protoc_insertion_point(field_get:IM.ChannelVec.channels)
  return channels_.Get(index);
}
inline ::IM::Channel* ChannelVec::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:IM.ChannelVec.channels)
  return channels_.Mutable(index);
}
inline ::IM::Channel* ChannelVec::add_channels() {
  // @@protoc_insertion_point(field_add:IM.ChannelVec.channels)
  return channels_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::IM::Channel >*
ChannelVec::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:IM.ChannelVec.channels)
  return &channels_;
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::Channel >&
ChannelVec::channels() const {
  // @@protoc_insertion_point(field_list:IM.ChannelVec.channels)
  return channels_;
}

// -------------------------------------------------------------------

// Channel

// optional int32 id = 1;
inline void Channel::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Channel::id() const {
  // @@protoc_insertion_point(field_get:IM.Channel.id)
  return id_;
}
inline void Channel::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:IM.Channel.id)
}

// optional string name = 2;
inline void Channel::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Channel::name() const {
  // @@protoc_insertion_point(field_get:IM.Channel.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Channel::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Channel.name)
}
inline void Channel::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Channel.name)
}
inline void Channel::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Channel.name)
}
inline ::std::string* Channel::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.Channel.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Channel::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Channel::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:IM.Channel.name)
}

// repeated .IM.User user = 3;
inline int Channel::user_size() const {
  return user_.size();
}
inline void Channel::clear_user() {
  user_.Clear();
}
inline const ::IM::User& Channel::user(int index) const {
  // @@protoc_insertion_point(field_get:IM.Channel.user)
  return user_.Get(index);
}
inline ::IM::User* Channel::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Channel.user)
  return user_.Mutable(index);
}
inline ::IM::User* Channel::add_user() {
  // @@protoc_insertion_point(field_add:IM.Channel.user)
  return user_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::IM::User >*
Channel::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:IM.Channel.user)
  return &user_;
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::User >&
Channel::user() const {
  // @@protoc_insertion_point(field_list:IM.Channel.user)
  return user_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_channel_2eproto__INCLUDED
