// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operate_channel.proto

#ifndef PROTOBUF_operate_5fchannel_2eproto__INCLUDED
#define PROTOBUF_operate_5fchannel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "operate_req_base.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_operate_5fchannel_2eproto();
void protobuf_AssignDesc_operate_5fchannel_2eproto();
void protobuf_ShutdownFile_operate_5fchannel_2eproto();

class OperateChannel;

// ===================================================================

class OperateChannel : public ::google::protobuf::Message {
 public:
  OperateChannel();
  virtual ~OperateChannel();

  OperateChannel(const OperateChannel& from);

  inline OperateChannel& operator=(const OperateChannel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperateChannel& default_instance();

  void Swap(OperateChannel* other);

  // implements Message ----------------------------------------------

  inline OperateChannel* New() const { return New(NULL); }

  OperateChannel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperateChannel& from);
  void MergeFrom(const OperateChannel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OperateChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .IM.OperateReqBase req_base = 1;
  bool has_req_base() const;
  void clear_req_base();
  static const int kReqBaseFieldNumber = 1;
  const ::IM::OperateReqBase& req_base() const;
  ::IM::OperateReqBase* mutable_req_base();
  ::IM::OperateReqBase* release_req_base();
  void set_allocated_req_base(::IM::OperateReqBase* req_base);

  // optional int32 result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:IM.OperateChannel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::IM::OperateReqBase* req_base_;
  ::google::protobuf::int32 result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_operate_5fchannel_2eproto();
  friend void protobuf_AssignDesc_operate_5fchannel_2eproto();
  friend void protobuf_ShutdownFile_operate_5fchannel_2eproto();

  void InitAsDefaultInstance();
  static OperateChannel* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// OperateChannel

// optional .IM.OperateReqBase req_base = 1;
inline bool OperateChannel::has_req_base() const {
  return !_is_default_instance_ && req_base_ != NULL;
}
inline void OperateChannel::clear_req_base() {
  if (GetArenaNoVirtual() == NULL && req_base_ != NULL) delete req_base_;
  req_base_ = NULL;
}
inline const ::IM::OperateReqBase& OperateChannel::req_base() const {
  // @@protoc_insertion_point(field_get:IM.OperateChannel.req_base)
  return req_base_ != NULL ? *req_base_ : *default_instance_->req_base_;
}
inline ::IM::OperateReqBase* OperateChannel::mutable_req_base() {
  
  if (req_base_ == NULL) {
    req_base_ = new ::IM::OperateReqBase;
  }
  // @@protoc_insertion_point(field_mutable:IM.OperateChannel.req_base)
  return req_base_;
}
inline ::IM::OperateReqBase* OperateChannel::release_req_base() {
  
  ::IM::OperateReqBase* temp = req_base_;
  req_base_ = NULL;
  return temp;
}
inline void OperateChannel::set_allocated_req_base(::IM::OperateReqBase* req_base) {
  delete req_base_;
  req_base_ = req_base;
  if (req_base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:IM.OperateChannel.req_base)
}

// optional int32 result = 2;
inline void OperateChannel::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 OperateChannel::result() const {
  // @@protoc_insertion_point(field_get:IM.OperateChannel.result)
  return result_;
}
inline void OperateChannel::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.OperateChannel.result)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_operate_5fchannel_2eproto__INCLUDED
