// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_update.proto

#ifndef PROTOBUF_user_5fupdate_2eproto__INCLUDED
#define PROTOBUF_user_5fupdate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "contacts.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_user_5fupdate_2eproto();
void protobuf_AssignDesc_user_5fupdate_2eproto();
void protobuf_ShutdownFile_user_5fupdate_2eproto();

class UserUpdateAck;
class UserUpdateReq;

// ===================================================================

class UserUpdateReq : public ::google::protobuf::Message {
 public:
  UserUpdateReq();
  virtual ~UserUpdateReq();

  UserUpdateReq(const UserUpdateReq& from);

  inline UserUpdateReq& operator=(const UserUpdateReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserUpdateReq& default_instance();

  void Swap(UserUpdateReq* other);

  // implements Message ----------------------------------------------

  inline UserUpdateReq* New() const { return New(NULL); }

  UserUpdateReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserUpdateReq& from);
  void MergeFrom(const UserUpdateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserUpdateReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // optional int32 channel_id = 2;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  ::google::protobuf::int32 channel_id() const;
  void set_channel_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:IM.UserUpdateReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 user_id_;
  ::google::protobuf::int32 channel_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_user_5fupdate_2eproto();
  friend void protobuf_AssignDesc_user_5fupdate_2eproto();
  friend void protobuf_ShutdownFile_user_5fupdate_2eproto();

  void InitAsDefaultInstance();
  static UserUpdateReq* default_instance_;
};
// -------------------------------------------------------------------

class UserUpdateAck : public ::google::protobuf::Message {
 public:
  UserUpdateAck();
  virtual ~UserUpdateAck();

  UserUpdateAck(const UserUpdateAck& from);

  inline UserUpdateAck& operator=(const UserUpdateAck& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserUpdateAck& default_instance();

  void Swap(UserUpdateAck* other);

  // implements Message ----------------------------------------------

  inline UserUpdateAck* New() const { return New(NULL); }

  UserUpdateAck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserUpdateAck& from);
  void MergeFrom(const UserUpdateAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserUpdateAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 channel_id = 1;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::int32 channel_id() const;
  void set_channel_id(::google::protobuf::int32 value);

  // optional .IM.User user = 2;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 2;
  const ::IM::User& user() const;
  ::IM::User* mutable_user();
  ::IM::User* release_user();
  void set_allocated_user(::IM::User* user);

  // @@protoc_insertion_point(class_scope:IM.UserUpdateAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::IM::User* user_;
  ::google::protobuf::int32 channel_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_user_5fupdate_2eproto();
  friend void protobuf_AssignDesc_user_5fupdate_2eproto();
  friend void protobuf_ShutdownFile_user_5fupdate_2eproto();

  void InitAsDefaultInstance();
  static UserUpdateAck* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// UserUpdateReq

// optional int64 user_id = 1;
inline void UserUpdateReq::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UserUpdateReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.UserUpdateReq.user_id)
  return user_id_;
}
inline void UserUpdateReq::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.UserUpdateReq.user_id)
}

// optional int32 channel_id = 2;
inline void UserUpdateReq::clear_channel_id() {
  channel_id_ = 0;
}
inline ::google::protobuf::int32 UserUpdateReq::channel_id() const {
  // @@protoc_insertion_point(field_get:IM.UserUpdateReq.channel_id)
  return channel_id_;
}
inline void UserUpdateReq::set_channel_id(::google::protobuf::int32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:IM.UserUpdateReq.channel_id)
}

// -------------------------------------------------------------------

// UserUpdateAck

// optional int32 channel_id = 1;
inline void UserUpdateAck::clear_channel_id() {
  channel_id_ = 0;
}
inline ::google::protobuf::int32 UserUpdateAck::channel_id() const {
  // @@protoc_insertion_point(field_get:IM.UserUpdateAck.channel_id)
  return channel_id_;
}
inline void UserUpdateAck::set_channel_id(::google::protobuf::int32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:IM.UserUpdateAck.channel_id)
}

// optional .IM.User user = 2;
inline bool UserUpdateAck::has_user() const {
  return !_is_default_instance_ && user_ != NULL;
}
inline void UserUpdateAck::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
inline const ::IM::User& UserUpdateAck::user() const {
  // @@protoc_insertion_point(field_get:IM.UserUpdateAck.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::IM::User* UserUpdateAck::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::IM::User;
  }
  // @@protoc_insertion_point(field_mutable:IM.UserUpdateAck.user)
  return user_;
}
inline ::IM::User* UserUpdateAck::release_user() {
  
  ::IM::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void UserUpdateAck::set_allocated_user(::IM::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:IM.UserUpdateAck.user)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_user_5fupdate_2eproto__INCLUDED
