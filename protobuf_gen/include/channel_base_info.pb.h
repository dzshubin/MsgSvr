// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel_base_info.proto

#ifndef PROTOBUF_channel_5fbase_5finfo_2eproto__INCLUDED
#define PROTOBUF_channel_5fbase_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace IM {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_channel_5fbase_5finfo_2eproto();
void protobuf_AssignDesc_channel_5fbase_5finfo_2eproto();
void protobuf_ShutdownFile_channel_5fbase_5finfo_2eproto();

class ChannelBase;
class ChannelBaseInfo;

// ===================================================================

class ChannelBaseInfo : public ::google::protobuf::Message {
 public:
  ChannelBaseInfo();
  virtual ~ChannelBaseInfo();

  ChannelBaseInfo(const ChannelBaseInfo& from);

  inline ChannelBaseInfo& operator=(const ChannelBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelBaseInfo& default_instance();

  void Swap(ChannelBaseInfo* other);

  // implements Message ----------------------------------------------

  inline ChannelBaseInfo* New() const { return New(NULL); }

  ChannelBaseInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelBaseInfo& from);
  void MergeFrom(const ChannelBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChannelBaseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.ChannelBase channel_base = 1;
  int channel_base_size() const;
  void clear_channel_base();
  static const int kChannelBaseFieldNumber = 1;
  const ::IM::ChannelBase& channel_base(int index) const;
  ::IM::ChannelBase* mutable_channel_base(int index);
  ::IM::ChannelBase* add_channel_base();
  ::google::protobuf::RepeatedPtrField< ::IM::ChannelBase >*
      mutable_channel_base();
  const ::google::protobuf::RepeatedPtrField< ::IM::ChannelBase >&
      channel_base() const;

  // @@protoc_insertion_point(class_scope:IM.ChannelBaseInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::IM::ChannelBase > channel_base_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_channel_5fbase_5finfo_2eproto();
  friend void protobuf_AssignDesc_channel_5fbase_5finfo_2eproto();
  friend void protobuf_ShutdownFile_channel_5fbase_5finfo_2eproto();

  void InitAsDefaultInstance();
  static ChannelBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class ChannelBase : public ::google::protobuf::Message {
 public:
  ChannelBase();
  virtual ~ChannelBase();

  ChannelBase(const ChannelBase& from);

  inline ChannelBase& operator=(const ChannelBase& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelBase& default_instance();

  void Swap(ChannelBase* other);

  // implements Message ----------------------------------------------

  inline ChannelBase* New() const { return New(NULL); }

  ChannelBase* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelBase& from);
  void MergeFrom(const ChannelBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChannelBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 channel_id = 1;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::int32 channel_id() const;
  void set_channel_id(::google::protobuf::int32 value);

  // optional string channel_name = 2;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 2;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // optional bool is_inside = 3;
  void clear_is_inside();
  static const int kIsInsideFieldNumber = 3;
  bool is_inside() const;
  void set_is_inside(bool value);

  // @@protoc_insertion_point(class_scope:IM.ChannelBase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  ::google::protobuf::int32 channel_id_;
  bool is_inside_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_channel_5fbase_5finfo_2eproto();
  friend void protobuf_AssignDesc_channel_5fbase_5finfo_2eproto();
  friend void protobuf_ShutdownFile_channel_5fbase_5finfo_2eproto();

  void InitAsDefaultInstance();
  static ChannelBase* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelBaseInfo

// repeated .IM.ChannelBase channel_base = 1;
inline int ChannelBaseInfo::channel_base_size() const {
  return channel_base_.size();
}
inline void ChannelBaseInfo::clear_channel_base() {
  channel_base_.Clear();
}
inline const ::IM::ChannelBase& ChannelBaseInfo::channel_base(int index) const {
  // @@protoc_insertion_point(field_get:IM.ChannelBaseInfo.channel_base)
  return channel_base_.Get(index);
}
inline ::IM::ChannelBase* ChannelBaseInfo::mutable_channel_base(int index) {
  // @@protoc_insertion_point(field_mutable:IM.ChannelBaseInfo.channel_base)
  return channel_base_.Mutable(index);
}
inline ::IM::ChannelBase* ChannelBaseInfo::add_channel_base() {
  // @@protoc_insertion_point(field_add:IM.ChannelBaseInfo.channel_base)
  return channel_base_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::IM::ChannelBase >*
ChannelBaseInfo::mutable_channel_base() {
  // @@protoc_insertion_point(field_mutable_list:IM.ChannelBaseInfo.channel_base)
  return &channel_base_;
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::ChannelBase >&
ChannelBaseInfo::channel_base() const {
  // @@protoc_insertion_point(field_list:IM.ChannelBaseInfo.channel_base)
  return channel_base_;
}

// -------------------------------------------------------------------

// ChannelBase

// optional int32 channel_id = 1;
inline void ChannelBase::clear_channel_id() {
  channel_id_ = 0;
}
inline ::google::protobuf::int32 ChannelBase::channel_id() const {
  // @@protoc_insertion_point(field_get:IM.ChannelBase.channel_id)
  return channel_id_;
}
inline void ChannelBase::set_channel_id(::google::protobuf::int32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:IM.ChannelBase.channel_id)
}

// optional string channel_name = 2;
inline void ChannelBase::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelBase::channel_name() const {
  // @@protoc_insertion_point(field_get:IM.ChannelBase.channel_name)
  return channel_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelBase::set_channel_name(const ::std::string& value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.ChannelBase.channel_name)
}
inline void ChannelBase::set_channel_name(const char* value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.ChannelBase.channel_name)
}
inline void ChannelBase::set_channel_name(const char* value, size_t size) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.ChannelBase.channel_name)
}
inline ::std::string* ChannelBase::mutable_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.ChannelBase.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelBase::release_channel_name() {
  
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelBase::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    
  } else {
    
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:IM.ChannelBase.channel_name)
}

// optional bool is_inside = 3;
inline void ChannelBase::clear_is_inside() {
  is_inside_ = false;
}
inline bool ChannelBase::is_inside() const {
  // @@protoc_insertion_point(field_get:IM.ChannelBase.is_inside)
  return is_inside_;
}
inline void ChannelBase::set_is_inside(bool value) {
  
  is_inside_ = value;
  // @@protoc_insertion_point(field_set:IM.ChannelBase.is_inside)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_channel_5fbase_5finfo_2eproto__INCLUDED
