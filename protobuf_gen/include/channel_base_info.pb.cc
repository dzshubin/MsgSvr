// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel_base_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "channel_base_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace IM {

namespace {

const ::google::protobuf::Descriptor* ChannelBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelBase_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_channel_5fbase_5finfo_2eproto() {
  protobuf_AddDesc_channel_5fbase_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "channel_base_info.proto");
  GOOGLE_CHECK(file != NULL);
  ChannelBaseInfo_descriptor_ = file->message_type(0);
  static const int ChannelBaseInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelBaseInfo, channel_base_),
  };
  ChannelBaseInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChannelBaseInfo_descriptor_,
      ChannelBaseInfo::default_instance_,
      ChannelBaseInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChannelBaseInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelBaseInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelBaseInfo, _is_default_instance_));
  ChannelBase_descriptor_ = file->message_type(1);
  static const int ChannelBase_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelBase, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelBase, channel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelBase, is_inside_),
  };
  ChannelBase_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChannelBase_descriptor_,
      ChannelBase::default_instance_,
      ChannelBase_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChannelBase),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelBase, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelBase, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_channel_5fbase_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChannelBaseInfo_descriptor_, &ChannelBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChannelBase_descriptor_, &ChannelBase::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_channel_5fbase_5finfo_2eproto() {
  delete ChannelBaseInfo::default_instance_;
  delete ChannelBaseInfo_reflection_;
  delete ChannelBase::default_instance_;
  delete ChannelBase_reflection_;
}

void protobuf_AddDesc_channel_5fbase_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027channel_base_info.proto\022\002IM\"8\n\017Channel"
    "BaseInfo\022%\n\014channel_base\030\001 \003(\0132\017.IM.Chan"
    "nelBase\"J\n\013ChannelBase\022\022\n\nchannel_id\030\001 \001"
    "(\005\022\024\n\014channel_name\030\002 \001(\t\022\021\n\tis_inside\030\003 "
    "\001(\010b\006proto3", 171);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "channel_base_info.proto", &protobuf_RegisterTypes);
  ChannelBaseInfo::default_instance_ = new ChannelBaseInfo();
  ChannelBase::default_instance_ = new ChannelBase();
  ChannelBaseInfo::default_instance_->InitAsDefaultInstance();
  ChannelBase::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_channel_5fbase_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_channel_5fbase_5finfo_2eproto {
  StaticDescriptorInitializer_channel_5fbase_5finfo_2eproto() {
    protobuf_AddDesc_channel_5fbase_5finfo_2eproto();
  }
} static_descriptor_initializer_channel_5fbase_5finfo_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelBaseInfo::kChannelBaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelBaseInfo::ChannelBaseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.ChannelBaseInfo)
}

void ChannelBaseInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChannelBaseInfo::ChannelBaseInfo(const ChannelBaseInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.ChannelBaseInfo)
}

void ChannelBaseInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ChannelBaseInfo::~ChannelBaseInfo() {
  // @@protoc_insertion_point(destructor:IM.ChannelBaseInfo)
  SharedDtor();
}

void ChannelBaseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChannelBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelBaseInfo_descriptor_;
}

const ChannelBaseInfo& ChannelBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fbase_5finfo_2eproto();
  return *default_instance_;
}

ChannelBaseInfo* ChannelBaseInfo::default_instance_ = NULL;

ChannelBaseInfo* ChannelBaseInfo::New(::google::protobuf::Arena* arena) const {
  ChannelBaseInfo* n = new ChannelBaseInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelBaseInfo::Clear() {
  channel_base_.Clear();
}

bool ChannelBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.ChannelBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IM.ChannelBase channel_base = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_channel_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_channel_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_channel_base;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.ChannelBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.ChannelBaseInfo)
  return false;
#undef DO_
}

void ChannelBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.ChannelBaseInfo)
  // repeated .IM.ChannelBase channel_base = 1;
  for (unsigned int i = 0, n = this->channel_base_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channel_base(i), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.ChannelBaseInfo)
}

::google::protobuf::uint8* ChannelBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.ChannelBaseInfo)
  // repeated .IM.ChannelBase channel_base = 1;
  for (unsigned int i = 0, n = this->channel_base_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->channel_base(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IM.ChannelBaseInfo)
  return target;
}

int ChannelBaseInfo::ByteSize() const {
  int total_size = 0;

  // repeated .IM.ChannelBase channel_base = 1;
  total_size += 1 * this->channel_base_size();
  for (int i = 0; i < this->channel_base_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channel_base(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChannelBaseInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelBaseInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChannelBaseInfo::MergeFrom(const ChannelBaseInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  channel_base_.MergeFrom(from.channel_base_);
}

void ChannelBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelBaseInfo::CopyFrom(const ChannelBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelBaseInfo::IsInitialized() const {

  return true;
}

void ChannelBaseInfo::Swap(ChannelBaseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelBaseInfo::InternalSwap(ChannelBaseInfo* other) {
  channel_base_.UnsafeArenaSwap(&other->channel_base_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelBaseInfo_descriptor_;
  metadata.reflection = ChannelBaseInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelBaseInfo

// repeated .IM.ChannelBase channel_base = 1;
int ChannelBaseInfo::channel_base_size() const {
  return channel_base_.size();
}
void ChannelBaseInfo::clear_channel_base() {
  channel_base_.Clear();
}
const ::IM::ChannelBase& ChannelBaseInfo::channel_base(int index) const {
  // @@protoc_insertion_point(field_get:IM.ChannelBaseInfo.channel_base)
  return channel_base_.Get(index);
}
::IM::ChannelBase* ChannelBaseInfo::mutable_channel_base(int index) {
  // @@protoc_insertion_point(field_mutable:IM.ChannelBaseInfo.channel_base)
  return channel_base_.Mutable(index);
}
::IM::ChannelBase* ChannelBaseInfo::add_channel_base() {
  // @@protoc_insertion_point(field_add:IM.ChannelBaseInfo.channel_base)
  return channel_base_.Add();
}
::google::protobuf::RepeatedPtrField< ::IM::ChannelBase >*
ChannelBaseInfo::mutable_channel_base() {
  // @@protoc_insertion_point(field_mutable_list:IM.ChannelBaseInfo.channel_base)
  return &channel_base_;
}
const ::google::protobuf::RepeatedPtrField< ::IM::ChannelBase >&
ChannelBaseInfo::channel_base() const {
  // @@protoc_insertion_point(field_list:IM.ChannelBaseInfo.channel_base)
  return channel_base_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelBase::kChannelIdFieldNumber;
const int ChannelBase::kChannelNameFieldNumber;
const int ChannelBase::kIsInsideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelBase::ChannelBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.ChannelBase)
}

void ChannelBase::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChannelBase::ChannelBase(const ChannelBase& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.ChannelBase)
}

void ChannelBase::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_id_ = 0;
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_inside_ = false;
}

ChannelBase::~ChannelBase() {
  // @@protoc_insertion_point(destructor:IM.ChannelBase)
  SharedDtor();
}

void ChannelBase::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChannelBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelBase_descriptor_;
}

const ChannelBase& ChannelBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_channel_5fbase_5finfo_2eproto();
  return *default_instance_;
}

ChannelBase* ChannelBase::default_instance_ = NULL;

ChannelBase* ChannelBase::New(::google::protobuf::Arena* arena) const {
  ChannelBase* n = new ChannelBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelBase::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChannelBase*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(channel_id_, is_inside_);
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ChannelBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.ChannelBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channel_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channel_name;
        break;
      }

      // optional string channel_name = 2;
      case 2: {
        if (tag == 18) {
         parse_channel_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel_name().data(), this->channel_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.ChannelBase.channel_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_inside;
        break;
      }

      // optional bool is_inside = 3;
      case 3: {
        if (tag == 24) {
         parse_is_inside:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_inside_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.ChannelBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.ChannelBase)
  return false;
#undef DO_
}

void ChannelBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.ChannelBase)
  // optional int32 channel_id = 1;
  if (this->channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel_id(), output);
  }

  // optional string channel_name = 2;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.ChannelBase.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel_name(), output);
  }

  // optional bool is_inside = 3;
  if (this->is_inside() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_inside(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.ChannelBase)
}

::google::protobuf::uint8* ChannelBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.ChannelBase)
  // optional int32 channel_id = 1;
  if (this->channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel_id(), target);
  }

  // optional string channel_name = 2;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.ChannelBase.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_name(), target);
  }

  // optional bool is_inside = 3;
  if (this->is_inside() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_inside(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IM.ChannelBase)
  return target;
}

int ChannelBase::ByteSize() const {
  int total_size = 0;

  // optional int32 channel_id = 1;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel_id());
  }

  // optional string channel_name = 2;
  if (this->channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel_name());
  }

  // optional bool is_inside = 3;
  if (this->is_inside() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelBase::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChannelBase* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelBase>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChannelBase::MergeFrom(const ChannelBase& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.channel_id() != 0) {
    set_channel_id(from.channel_id());
  }
  if (from.channel_name().size() > 0) {

    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  if (from.is_inside() != 0) {
    set_is_inside(from.is_inside());
  }
}

void ChannelBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelBase::CopyFrom(const ChannelBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelBase::IsInitialized() const {

  return true;
}

void ChannelBase::Swap(ChannelBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelBase::InternalSwap(ChannelBase* other) {
  std::swap(channel_id_, other->channel_id_);
  channel_name_.Swap(&other->channel_name_);
  std::swap(is_inside_, other->is_inside_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelBase_descriptor_;
  metadata.reflection = ChannelBase_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelBase

// optional int32 channel_id = 1;
void ChannelBase::clear_channel_id() {
  channel_id_ = 0;
}
 ::google::protobuf::int32 ChannelBase::channel_id() const {
  // @@protoc_insertion_point(field_get:IM.ChannelBase.channel_id)
  return channel_id_;
}
 void ChannelBase::set_channel_id(::google::protobuf::int32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:IM.ChannelBase.channel_id)
}

// optional string channel_name = 2;
void ChannelBase::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChannelBase::channel_name() const {
  // @@protoc_insertion_point(field_get:IM.ChannelBase.channel_name)
  return channel_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChannelBase::set_channel_name(const ::std::string& value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.ChannelBase.channel_name)
}
 void ChannelBase::set_channel_name(const char* value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.ChannelBase.channel_name)
}
 void ChannelBase::set_channel_name(const char* value, size_t size) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.ChannelBase.channel_name)
}
 ::std::string* ChannelBase::mutable_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.ChannelBase.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChannelBase::release_channel_name() {
  
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChannelBase::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    
  } else {
    
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:IM.ChannelBase.channel_name)
}

// optional bool is_inside = 3;
void ChannelBase::clear_is_inside() {
  is_inside_ = false;
}
 bool ChannelBase::is_inside() const {
  // @@protoc_insertion_point(field_get:IM.ChannelBase.is_inside)
  return is_inside_;
}
 void ChannelBase::set_is_inside(bool value) {
  
  is_inside_ = value;
  // @@protoc_insertion_point(field_set:IM.ChannelBase.is_inside)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace IM

// @@protoc_insertion_point(global_scope)
