// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_update.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user_update.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace IM {

namespace {

const ::google::protobuf::Descriptor* UserUpdateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserUpdateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserUpdateAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserUpdateAck_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_user_5fupdate_2eproto() {
  protobuf_AddDesc_user_5fupdate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "user_update.proto");
  GOOGLE_CHECK(file != NULL);
  UserUpdateReq_descriptor_ = file->message_type(0);
  static const int UserUpdateReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserUpdateReq, req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserUpdateReq, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserUpdateReq, channel_id_),
  };
  UserUpdateReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserUpdateReq_descriptor_,
      UserUpdateReq::default_instance_,
      UserUpdateReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserUpdateReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserUpdateReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserUpdateReq, _is_default_instance_));
  UserUpdateAck_descriptor_ = file->message_type(1);
  static const int UserUpdateAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserUpdateAck, req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserUpdateAck, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserUpdateAck, channel_id_),
  };
  UserUpdateAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserUpdateAck_descriptor_,
      UserUpdateAck::default_instance_,
      UserUpdateAck_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserUpdateAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserUpdateAck, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserUpdateAck, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_user_5fupdate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserUpdateReq_descriptor_, &UserUpdateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserUpdateAck_descriptor_, &UserUpdateAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_user_5fupdate_2eproto() {
  delete UserUpdateReq::default_instance_;
  delete UserUpdateReq_reflection_;
  delete UserUpdateAck::default_instance_;
  delete UserUpdateAck_reflection_;
}

void protobuf_AddDesc_user_5fupdate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::IM::protobuf_AddDesc_contacts_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021user_update.proto\022\002IM\032\016contacts.proto\""
    "F\n\rUserUpdateReq\022\016\n\006req_id\030\001 \001(\003\022\021\n\ttarg"
    "et_id\030\002 \001(\003\022\022\n\nchannel_id\030\003 \001(\005\"K\n\rUserU"
    "pdateAck\022\016\n\006req_id\030\001 \001(\003\022\026\n\004user\030\002 \001(\0132\010"
    ".IM.User\022\022\n\nchannel_id\030\003 \001(\005b\006proto3", 196);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "user_update.proto", &protobuf_RegisterTypes);
  UserUpdateReq::default_instance_ = new UserUpdateReq();
  UserUpdateAck::default_instance_ = new UserUpdateAck();
  UserUpdateReq::default_instance_->InitAsDefaultInstance();
  UserUpdateAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_user_5fupdate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_user_5fupdate_2eproto {
  StaticDescriptorInitializer_user_5fupdate_2eproto() {
    protobuf_AddDesc_user_5fupdate_2eproto();
  }
} static_descriptor_initializer_user_5fupdate_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserUpdateReq::kReqIdFieldNumber;
const int UserUpdateReq::kTargetIdFieldNumber;
const int UserUpdateReq::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserUpdateReq::UserUpdateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.UserUpdateReq)
}

void UserUpdateReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserUpdateReq::UserUpdateReq(const UserUpdateReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.UserUpdateReq)
}

void UserUpdateReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  req_id_ = GOOGLE_LONGLONG(0);
  target_id_ = GOOGLE_LONGLONG(0);
  channel_id_ = 0;
}

UserUpdateReq::~UserUpdateReq() {
  // @@protoc_insertion_point(destructor:IM.UserUpdateReq)
  SharedDtor();
}

void UserUpdateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserUpdateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserUpdateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserUpdateReq_descriptor_;
}

const UserUpdateReq& UserUpdateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fupdate_2eproto();
  return *default_instance_;
}

UserUpdateReq* UserUpdateReq::default_instance_ = NULL;

UserUpdateReq* UserUpdateReq::New(::google::protobuf::Arena* arena) const {
  UserUpdateReq* n = new UserUpdateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserUpdateReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserUpdateReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(req_id_, channel_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool UserUpdateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.UserUpdateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 req_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &req_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // optional int64 target_id = 2;
      case 2: {
        if (tag == 16) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }

      // optional int32 channel_id = 3;
      case 3: {
        if (tag == 24) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.UserUpdateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.UserUpdateReq)
  return false;
#undef DO_
}

void UserUpdateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.UserUpdateReq)
  // optional int64 req_id = 1;
  if (this->req_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->req_id(), output);
  }

  // optional int64 target_id = 2;
  if (this->target_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->target_id(), output);
  }

  // optional int32 channel_id = 3;
  if (this->channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channel_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.UserUpdateReq)
}

::google::protobuf::uint8* UserUpdateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.UserUpdateReq)
  // optional int64 req_id = 1;
  if (this->req_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->req_id(), target);
  }

  // optional int64 target_id = 2;
  if (this->target_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->target_id(), target);
  }

  // optional int32 channel_id = 3;
  if (this->channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channel_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IM.UserUpdateReq)
  return target;
}

int UserUpdateReq::ByteSize() const {
  int total_size = 0;

  // optional int64 req_id = 1;
  if (this->req_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->req_id());
  }

  // optional int64 target_id = 2;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target_id());
  }

  // optional int32 channel_id = 3;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserUpdateReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserUpdateReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserUpdateReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserUpdateReq::MergeFrom(const UserUpdateReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.req_id() != 0) {
    set_req_id(from.req_id());
  }
  if (from.target_id() != 0) {
    set_target_id(from.target_id());
  }
  if (from.channel_id() != 0) {
    set_channel_id(from.channel_id());
  }
}

void UserUpdateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserUpdateReq::CopyFrom(const UserUpdateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserUpdateReq::IsInitialized() const {

  return true;
}

void UserUpdateReq::Swap(UserUpdateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserUpdateReq::InternalSwap(UserUpdateReq* other) {
  std::swap(req_id_, other->req_id_);
  std::swap(target_id_, other->target_id_);
  std::swap(channel_id_, other->channel_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserUpdateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserUpdateReq_descriptor_;
  metadata.reflection = UserUpdateReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserUpdateReq

// optional int64 req_id = 1;
void UserUpdateReq::clear_req_id() {
  req_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 UserUpdateReq::req_id() const {
  // @@protoc_insertion_point(field_get:IM.UserUpdateReq.req_id)
  return req_id_;
}
 void UserUpdateReq::set_req_id(::google::protobuf::int64 value) {
  
  req_id_ = value;
  // @@protoc_insertion_point(field_set:IM.UserUpdateReq.req_id)
}

// optional int64 target_id = 2;
void UserUpdateReq::clear_target_id() {
  target_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 UserUpdateReq::target_id() const {
  // @@protoc_insertion_point(field_get:IM.UserUpdateReq.target_id)
  return target_id_;
}
 void UserUpdateReq::set_target_id(::google::protobuf::int64 value) {
  
  target_id_ = value;
  // @@protoc_insertion_point(field_set:IM.UserUpdateReq.target_id)
}

// optional int32 channel_id = 3;
void UserUpdateReq::clear_channel_id() {
  channel_id_ = 0;
}
 ::google::protobuf::int32 UserUpdateReq::channel_id() const {
  // @@protoc_insertion_point(field_get:IM.UserUpdateReq.channel_id)
  return channel_id_;
}
 void UserUpdateReq::set_channel_id(::google::protobuf::int32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:IM.UserUpdateReq.channel_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserUpdateAck::kReqIdFieldNumber;
const int UserUpdateAck::kUserFieldNumber;
const int UserUpdateAck::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserUpdateAck::UserUpdateAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.UserUpdateAck)
}

void UserUpdateAck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  user_ = const_cast< ::IM::User*>(&::IM::User::default_instance());
}

UserUpdateAck::UserUpdateAck(const UserUpdateAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.UserUpdateAck)
}

void UserUpdateAck::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  req_id_ = GOOGLE_LONGLONG(0);
  user_ = NULL;
  channel_id_ = 0;
}

UserUpdateAck::~UserUpdateAck() {
  // @@protoc_insertion_point(destructor:IM.UserUpdateAck)
  SharedDtor();
}

void UserUpdateAck::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void UserUpdateAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserUpdateAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserUpdateAck_descriptor_;
}

const UserUpdateAck& UserUpdateAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_user_5fupdate_2eproto();
  return *default_instance_;
}

UserUpdateAck* UserUpdateAck::default_instance_ = NULL;

UserUpdateAck* UserUpdateAck::New(::google::protobuf::Arena* arena) const {
  UserUpdateAck* n = new UserUpdateAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserUpdateAck::Clear() {
  req_id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
  channel_id_ = 0;
}

bool UserUpdateAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.UserUpdateAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 req_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &req_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // optional .IM.User user = 2;
      case 2: {
        if (tag == 18) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }

      // optional int32 channel_id = 3;
      case 3: {
        if (tag == 24) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.UserUpdateAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.UserUpdateAck)
  return false;
#undef DO_
}

void UserUpdateAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.UserUpdateAck)
  // optional int64 req_id = 1;
  if (this->req_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->req_id(), output);
  }

  // optional .IM.User user = 2;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->user_, output);
  }

  // optional int32 channel_id = 3;
  if (this->channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channel_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:IM.UserUpdateAck)
}

::google::protobuf::uint8* UserUpdateAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.UserUpdateAck)
  // optional int64 req_id = 1;
  if (this->req_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->req_id(), target);
  }

  // optional .IM.User user = 2;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->user_, target);
  }

  // optional int32 channel_id = 3;
  if (this->channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channel_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IM.UserUpdateAck)
  return target;
}

int UserUpdateAck::ByteSize() const {
  int total_size = 0;

  // optional int64 req_id = 1;
  if (this->req_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->req_id());
  }

  // optional .IM.User user = 2;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  // optional int32 channel_id = 3;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserUpdateAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserUpdateAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserUpdateAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserUpdateAck::MergeFrom(const UserUpdateAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.req_id() != 0) {
    set_req_id(from.req_id());
  }
  if (from.has_user()) {
    mutable_user()->::IM::User::MergeFrom(from.user());
  }
  if (from.channel_id() != 0) {
    set_channel_id(from.channel_id());
  }
}

void UserUpdateAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserUpdateAck::CopyFrom(const UserUpdateAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserUpdateAck::IsInitialized() const {

  return true;
}

void UserUpdateAck::Swap(UserUpdateAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserUpdateAck::InternalSwap(UserUpdateAck* other) {
  std::swap(req_id_, other->req_id_);
  std::swap(user_, other->user_);
  std::swap(channel_id_, other->channel_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserUpdateAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserUpdateAck_descriptor_;
  metadata.reflection = UserUpdateAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserUpdateAck

// optional int64 req_id = 1;
void UserUpdateAck::clear_req_id() {
  req_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 UserUpdateAck::req_id() const {
  // @@protoc_insertion_point(field_get:IM.UserUpdateAck.req_id)
  return req_id_;
}
 void UserUpdateAck::set_req_id(::google::protobuf::int64 value) {
  
  req_id_ = value;
  // @@protoc_insertion_point(field_set:IM.UserUpdateAck.req_id)
}

// optional .IM.User user = 2;
bool UserUpdateAck::has_user() const {
  return !_is_default_instance_ && user_ != NULL;
}
void UserUpdateAck::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
const ::IM::User& UserUpdateAck::user() const {
  // @@protoc_insertion_point(field_get:IM.UserUpdateAck.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
::IM::User* UserUpdateAck::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::IM::User;
  }
  // @@protoc_insertion_point(field_mutable:IM.UserUpdateAck.user)
  return user_;
}
::IM::User* UserUpdateAck::release_user() {
  
  ::IM::User* temp = user_;
  user_ = NULL;
  return temp;
}
void UserUpdateAck::set_allocated_user(::IM::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:IM.UserUpdateAck.user)
}

// optional int32 channel_id = 3;
void UserUpdateAck::clear_channel_id() {
  channel_id_ = 0;
}
 ::google::protobuf::int32 UserUpdateAck::channel_id() const {
  // @@protoc_insertion_point(field_get:IM.UserUpdateAck.channel_id)
  return channel_id_;
}
 void UserUpdateAck::set_channel_id(::google::protobuf::int32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:IM.UserUpdateAck.channel_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace IM

// @@protoc_insertion_point(global_scope)
