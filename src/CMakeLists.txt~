
cmake_minimum_required (VERSION 2.8)
# Project name
#set (project_name MsgSvr)
project (MsgSvr)



message(STATUS "compiler is ${CMAKE_CXX_COMPILER_ID}" )
message(${PROJECT_SOURCE_DIR})


ADD_DEFINITIONS (-std=c++0x -Wstrict-prototypes -Wall )

if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
    execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)
    if (NOT (GCC_VERSION VERSION_GREATER 4.7 OR GCC_VERSION VERSION_EQUAL 4.7))
        message(FATAL_ERROR "${PROJECT_NAME} requires g++ 4.7 or greater.")
    endif ()
    elseif ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")

    else ()
        message(FATAL_ERROR "Your C++ compiler does not support C++11.")
    endif ()

SET (CMAKE_USE_RELATIVE_PATHS ON)

set (Boost_root_path    ../boost)
set (Boost_head_path    ${Boost_root_path}/include)
set (Boost_lib_path	    ${Boost_root_path}/lib)


include_directories(${Boost_head_path})
LINK_DIRECTORIES(${Boost_lib_path})


set (Boost_system_lib 		    ${Boost_lib_path}/libboost_system.a)
set (Boost_serialization_lib 	${Boost_lib_path}/libboost_serialization.a)
set (Boost_signals_lib 		    ${Boost_lib_path}/libboost_signals.a)


set (Used_libs ${Boost_system_lib} ${Boost_serialization_lib} ${Boost_signals_lib})



# 当前目前下的所有源文件
aux_source_directory (. DIR_SRCS)
ADD_EXECUTABLE(MsgSvr ${DIR_SRCS})


#
TARGET_LINK_LIBRARIES(MsgSvr ${Used_libs})
TARGET_LINK_LIBRARIES(MsgSvr -lpthread)


